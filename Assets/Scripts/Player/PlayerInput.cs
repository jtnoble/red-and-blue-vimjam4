//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Player/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""e77cda03-c0e0-422b-9ca5-6849c26c7012"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""48bfe369-f3b7-41ee-baea-071dfe30ddd1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""0f661b61-d059-4a6b-9714-bddd8af969c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SaveCheckpoint"",
                    ""type"": ""Value"",
                    ""id"": ""a616eb99-cc8c-4cb3-9c65-d3e85a120a67"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LoadCheckpoint"",
                    ""type"": ""Value"",
                    ""id"": ""ea80ca45-0700-4524-8d57-6c98863dbf6a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ResetLevel"",
                    ""type"": ""Value"",
                    ""id"": ""97bd8759-d1b0-48f5-aa29-563d1588d165"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PauseGame"",
                    ""type"": ""Value"",
                    ""id"": ""443ece8e-3c7e-46b2-aae5-da2b8042dc15"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1fab4b62-f848-4b12-87d2-a747fa89a31f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""85f3e2c8-b2d7-4e8f-bc0f-8b2582ea11e0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a4f8e366-220c-4893-b327-1b03b028f105"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e5df4c0d-5c74-449e-a85e-d6770795f9f0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8bf83d37-4b3d-4c5c-a8fc-26b8dbc9580f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3bb32362-e5d2-4077-8c10-f2d78c9e8d36"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5606acc3-25b6-4edc-84ac-559bc64481f8"",
                    ""path"": ""<Keyboard>/leftBracket"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SaveCheckpoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1344fc4-cccc-4e22-8628-d42ee09f0497"",
                    ""path"": ""<Keyboard>/rightBracket"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadCheckpoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ac5c984-961d-4112-a562-f302eceaa970"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResetLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b7b9919-5c69-47d4-8cf7-77664c806a10"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        m_Movement_SaveCheckpoint = m_Movement.FindAction("SaveCheckpoint", throwIfNotFound: true);
        m_Movement_LoadCheckpoint = m_Movement.FindAction("LoadCheckpoint", throwIfNotFound: true);
        m_Movement_ResetLevel = m_Movement.FindAction("ResetLevel", throwIfNotFound: true);
        m_Movement_PauseGame = m_Movement.FindAction("PauseGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Move;
    private readonly InputAction m_Movement_Jump;
    private readonly InputAction m_Movement_SaveCheckpoint;
    private readonly InputAction m_Movement_LoadCheckpoint;
    private readonly InputAction m_Movement_ResetLevel;
    private readonly InputAction m_Movement_PauseGame;
    public struct MovementActions
    {
        private @PlayerInput m_Wrapper;
        public MovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputAction @SaveCheckpoint => m_Wrapper.m_Movement_SaveCheckpoint;
        public InputAction @LoadCheckpoint => m_Wrapper.m_Movement_LoadCheckpoint;
        public InputAction @ResetLevel => m_Wrapper.m_Movement_ResetLevel;
        public InputAction @PauseGame => m_Wrapper.m_Movement_PauseGame;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @SaveCheckpoint.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnSaveCheckpoint;
                @SaveCheckpoint.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnSaveCheckpoint;
                @SaveCheckpoint.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnSaveCheckpoint;
                @LoadCheckpoint.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnLoadCheckpoint;
                @LoadCheckpoint.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnLoadCheckpoint;
                @LoadCheckpoint.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnLoadCheckpoint;
                @ResetLevel.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnResetLevel;
                @ResetLevel.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnResetLevel;
                @ResetLevel.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnResetLevel;
                @PauseGame.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnPauseGame;
                @PauseGame.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnPauseGame;
                @PauseGame.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnPauseGame;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @SaveCheckpoint.started += instance.OnSaveCheckpoint;
                @SaveCheckpoint.performed += instance.OnSaveCheckpoint;
                @SaveCheckpoint.canceled += instance.OnSaveCheckpoint;
                @LoadCheckpoint.started += instance.OnLoadCheckpoint;
                @LoadCheckpoint.performed += instance.OnLoadCheckpoint;
                @LoadCheckpoint.canceled += instance.OnLoadCheckpoint;
                @ResetLevel.started += instance.OnResetLevel;
                @ResetLevel.performed += instance.OnResetLevel;
                @ResetLevel.canceled += instance.OnResetLevel;
                @PauseGame.started += instance.OnPauseGame;
                @PauseGame.performed += instance.OnPauseGame;
                @PauseGame.canceled += instance.OnPauseGame;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSaveCheckpoint(InputAction.CallbackContext context);
        void OnLoadCheckpoint(InputAction.CallbackContext context);
        void OnResetLevel(InputAction.CallbackContext context);
        void OnPauseGame(InputAction.CallbackContext context);
    }
}
